generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String          @id @default(cuid())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  imageUrl       String?
  firstName      String?
  lastName       String?
  emailAddress   String          @unique
  credits        Int             @default(200)
  questionsAsked Question[]
  userToProjects UserToproject[]
}

model Project {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  name                 String
  githubUrl            String
  githubToken          String?
  deleteAt             DateTime?
  commits              Commit[]
  questions            Question[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  userToProjects       UserToproject[]

  meetings             Meeting[]
}

model UserToproject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model SourceCodeEmbedding {
  id               String                @id @default(cuid())
  summaryEmbedding Unsupported("vector(768)")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project               @relation(fields: [projectId], references: [id])
}

model Question {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  question        String
  answer          String
  filesReferences Json?
  projectId       String
  userId          String
  project         Project  @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Commit {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  projectId         String
  commitMessage     String
  commitHash        String
  commitAuthorName  String
  commitAuthorAvtar String
  commitDate        String
  summary           String
  project           Project  @relation(fields: [projectId], references: [id])
}
model Meeting{
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  name              String
  
  meetingUrl        String   
  projectId         String
  project           Project  @relation(fields:[projectId],references:[id])

  status            MeetingStatus @default(PROCESSING)
  issues            Issue[]
}
enum MeetingStatus{
  PROCESSING
  COMPLETED
}

model Issue{
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  start     String
  end       String
  gist      String
  summary   String
  headline  String

  meetingId String
  meeting   Meeting     @relation(fields:[meetingId],references:[id])
}
